on:
  workflow_call:
    inputs:
      releaseHexPmOS:
        required: false
        type: string
        default: debian
      releaseHexPmOSVersion:
        required: false
        type: string
        default: bullseye-20230227-slim
      dockerTag:
        required: false
        type: string
      dockerBuild:
        required: false
        type: boolean
        default: true

name: "Build"

jobs:
  detect_clean_versions:
    name: Detect Clean Versions

    runs-on: ubuntu-latest

    outputs:
      elixirVersion: "${{ env.ELIXIR_VERSION }}"
      otpVersion: "${{ env.OTP_VERSION }}"

    steps:
      - uses: actions/checkout@v4
      - name: "Read .tool-versions"
        id: toolVersions
        run: |
          ELIXIR_VERSION="$(cat .tool-versions | grep elixir | cut -d' ' -f2- | sed 's/-otp-[0-9]*//')"
          echo Elixir: $ELIXIR_VERSION
          echo "ELIXIR_VERSION=${ELIXIR_VERSION}" >> $GITHUB_ENV

          OTP_VERSION="$(cat .tool-versions | grep erlang | cut -d' ' -f2-)"
          echo OTP: $OTP_VERSION
          echo "OTP_VERSION=${OTP_VERSION}" >> $GITHUB_ENV

  compile_assets:
    name: Compile Assets

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-elixir@v1
        id: setupBEAM
        with:
          version-file: '.tool-versions'
          version-type: strict
      - uses: actions/cache@v3
        with:
          path: deps
          key: deps-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ steps.setupBEAM.outputs.elixir-version }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ steps.setupBEAM.outputs.elixir-version }}-
      - run: mix deps.get
      - uses: actions/setup-node@v3
        id: setupNode
        with:
          node-version-file: '.tool-versions'
      - run: npm config set cache $GITHUB_WORKSPACE/.ci-npm-cache
      - uses: actions/cache@v3
        with:
          path: .ci-npm-cache
          key: deps-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ steps.setupBEAM.outputs.elixir-version }}-${{ hashFiles('assets/package-lock.json') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ steps.setupNode.outputs.node-version }}-
      - run: npm ci --prefix=assets
      - run: npm run deploy --prefix=assets
      - uses: actions/upload-artifact@v3
        with:
          name: compile_assets
          path: priv/static

  mix_release:
    name: "Mix Release"

    runs-on: ubuntu-latest

    needs: ['detect_clean_versions', 'compile_assets']

    container:
      image: hexpm/elixir:${{ needs.detect_clean_versions.outputs.elixirVersion }}-erlang-${{ needs.detect_clean_versions.outputs.otpVersion }}-${{ inputs.releaseHexPmOS }}-${{ inputs.releaseHexPmOSVersion }}

    env:
      MIX_ENV: prod

    steps:
      - uses: actions/checkout@v4
      - run: |
          apt-get update -yqq
          apt-get install -yqq git
          mix local.hex --force
          mix local.rebar --force
      - uses: actions/cache@v3
        with:
          path: deps
          key: deps-docker-${{ env.MIX_ENV }}-${{ runner.os }}-${{ needs.detect_clean_versions.outputs.otpVersion }}-${{ needs.detect_clean_versions.outputs.elixirVersion }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            deps-docker-${{ env.MIX_ENV }}-${{ runner.os }}-${{ needs.detect_clean_versions.outputs.otpVersion }}-${{ needs.detect_clean_versions.outputs.elixirVersion }}-
      - run: mix deps.get
      - uses: actions/cache@v3
        with:
          path: |
            _build/prod
            !_build/prod/rel
          key: compile-docker-${{ env.MIX_ENV }}-${{ runner.os }}-${{ needs.detect_clean_versions.outputs.otpVersion }}-${{ needs.detect_clean_versions.outputs.elixirVersion }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            compile-docker-${{ env.MIX_ENV }}-${{ runner.os }}-${{ needs.detect_clean_versions.outputs.otpVersion }}-${{ needs.detect_clean_versions.outputs.elixirVersion }}-
      - run: mix deps.compile
        env:
          MIX_ENV: prod
      - run: mix compile --warning-as-errors
        env:
          MIX_ENV: prod
      - uses: actions/download-artifact@v3
        with:
          name: compile_assets
          path: priv/static
      - run: mix phx.digest
      - run: mix release --overwrite
      - run: tar -czvf release.tar.gz _build/prod/rel/hygeia
      - uses: actions/upload-artifact@v3
        with:
          name: mix_release
          path: release.tar.gz

  docker_build:
    name: "Docker Build"

    runs-on: ubuntu-latest

    needs: ['detect_clean_versions', 'mix_release']

    if: ${{ inputs.dockerBuild }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: mix_release
          path: .
      - run: tar -zxvf release.tar.gz
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-${{ runner.os }}-${{ needs.detect_clean_versions.outputs.elixirVersion }}-erlang-${{ needs.detect_clean_versions.outputs.otpVersion }}-${{ inputs.releaseHexPmOS }}-${{ inputs.releaseHexPmOSVersion }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ocker-${{ runner.os }}-${{ needs.detect_clean_versions.outputs.elixirVersion }}-erlang-${{ needs.detect_clean_versions.outputs.otpVersion }}-${{ inputs.releaseHexPmOS }}-${{ inputs.releaseHexPmOSVersion }}-
      - run: |
          docker \
            build \
            --tag ghcr.io/${{ github.repository }}:$GITHUB_SHA \
            --build-arg ELIXIR_VERSION="${{ needs.detect_clean_versions.outputs.elixirVersion }}" \
            --build-arg ERLANG_VERSION="${{ needs.detect_clean_versions.outputs.otpVersion }}" \
            --build-arg HEXPM_BOB_OS="${{ inputs.releaseHexPmOS }}" \
            --build-arg HEXPM_BOB_OS_VERSION="${{ inputs.releaseHexPmOSVersion }}" \
            .
      - run: docker push ghcr.io/${{ github.repository }}:$GITHUB_SHA
      - run: docker tag ghcr.io/${{ github.repository }}:$GITHUB_SHA ghcr.io/${{ github.repository }}:${{ inputs.dockerTag }}
        if: ${{ inputs.dockerTag }}
      - run: docker push ghcr.io/${{ github.repository }}:${{ inputs.dockerTag }}
        if: ${{ inputs.dockerTag }}
