@mixin readonly-form {
  .form-control {
    text-overflow: ellipsis;
  }

  .value,
  .form-control[disabled] {
    background-color: transparent;
    border: 0;
    padding: 0;
    color: $gray-600;
    appearance: none;
    height: auto;
  }
}

@mixin progress-steps {
  display: flex;
  justify-content: space-between;
  list-style-type: none;
  padding: 0;
  position: relative;

  .progress-bar {
    position: absolute;
    border-top: 1px solid $gray-200;
    border-bottom: 1px solid $gray-200;
    left: calc(100% / var(--progress-bar-items) / 2);
    right: calc(100% / var(--progress-bar-items) / 2);
    top: 1rem;

    @include media-breakpoint-down(md) {
      top: 0.8rem;
    }
  }

  a.progress-step,
  .progress-step.interactive {
    cursor: pointer;

    &:hover {
      color: shade-color($primary, 30) !important;
    }
  }

  .progress-step {
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: center;
    flex-grow: 1;
    flex-basis: 0;
    z-index: 1;
    text-align: center;
    color: $gray-500;
    font-weight: 500;

    &:before {
      content: "";
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: "Icons";
      color: $white;
      font-size: 1rem;
      width: 2rem;
      height: 2rem;
      margin-bottom: 0.5rem;
      border-radius: 10000px;
      background-color: $white;
      border: 2px solid $gray-200;

      @include media-breakpoint-down(md) {
        font-size: 0.8rem;
        width: 1.6rem;
        height: 1.6rem;
        margin-bottom: 0.8rem;
      }
    }

    &.completed {
      color: $primary;

      &:before {
        content: "\e033";
        background-color: $primary;
        border-color: $primary;
      }
    }

    &.next {
      color: $primary;

      &:before {
        border-color: $primary;
      }
    }

    &.active {
      font-weight: 600;
      color: $primary;
      &:before {
        background-color: $primary;
        border-color: $primary;
      }
    }
  }
}

// =============================================================================
// String Replace
// =============================================================================
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================
@mixin font-face($name, $slug, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $extmods: (
    eot: "?",
    svg: "#" + str-replace($slug, " ", "_"),
  );
  $formats: (
    otf: "opentype",
    ttf: "truetype",
  );
  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append(
      $src,
      url(quote("../fonts/" + $slug + "-" + $style + "-" + $weight + "." + $extmod)) format(quote($format)),
      comma
    );
  }
  @font-face {
    font-family: quote($name);
    font-display: swap;
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}
